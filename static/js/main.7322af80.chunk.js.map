{"version":3,"sources":["componets/card/card.conponet.jsx","componets/card-list/card-list.componet.jsx","componets/Search-Box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","Monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","monsters","setMonsters","searchField","setSearchField","useEffect","fetch","then","res","json","users","filterMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEaA,G,kBAAO,SAACC,GACf,OAAS,sBAAKC,UAAU,iBAAf,UACL,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,6BAAML,EAAMI,QAAQE,YCFhBC,EAAU,SAACP,GACpB,OACA,qBAAKC,UAAU,YAAf,SACOD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAC/B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJbK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAWF,MC+ClEG,MA/Cf,WAAe,IAAD,EACoBC,mBAAS,IAD7B,mBACLC,EADK,KACKC,EADL,OAEyBF,mBAAS,KAFlC,mBAELG,EAFK,KAEOC,EAFP,KAGZC,qBAAU,WAERC,MAAM,8CAELC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAEhBF,MAAK,SAACG,GAASR,EAAYQ,QAC5B,IAEF,IAAMC,EAAiBV,EAASW,QAAQ,SAAAxB,GAAO,OAC7CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAClD,OACE,sBAAK5B,UAAU,MAAf,UACC,oBAAIA,UAAU,MAAd,8BACC,cAAC,EAAD,CAAaU,YAAY,iBAAiBC,aAAc,SAAAmB,GAAC,OAAIX,EAAeW,EAAEC,OAAOC,UACrF,cAAC,EAAD,CAAUzB,SAAUmB,QCVXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7322af80.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props) =>{\r\n      return ( <div className=\"card-container\">\r\n          <img alt=\"monster\" src={`https://robohash.org/${ props.monster.id}?set=set2&size=180x180`}/>\r\n          <h1>{ props.monster.name }</h1>\r\n      </div> );\r\n}","import React from 'react';\r\nimport './card-list-style.css'\r\nimport { Card } from '../card/card.conponet'\r\n export const CardList =(props)=>{\r\n     return(\r\n     <div className='card-list'>\r\n          { props.Monsters.map(monster =>(\r\n       <Card key={monster.id} monster={monster} />\r\n       ))}\r\n     </div>\r\n     )\r\n };","import react from 'react';\r\nimport './search-box-style.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>(\r\n    <input className='search' type=\"search\" placeholder={placeholder} onChange={ handleChange }/>\r\n\r\n);\r\n","import './App.css'\nimport {React, useEffect, useState} from 'react'\nimport { CardList} from './componets/card-list/card-list.componet';\nimport { SearchBox } from \"./componets/Search-Box/search-box.component\";\nfunction App(){\n  const [monsters, setMonsters] = useState([]); //useState([''])\n  const [searchField,setSearchField] = useState('a');\n  useEffect(()=>{\n      // Where we're fetching data from\n    fetch('https://jsonplaceholder.typicode.com/users')\n     // We get the API response and receive data in JSON format...\n    .then(res => res.json())\n     // ...then we update the users state\n    .then((users)=>{setMonsters(users)});  \n  },[]);\n  \n  const filterMonsters = monsters.filter( monster =>       \n    monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return(  \n    <div className=\"App\">\n     <h1 className='h1A'>Monsters Rolodex</h1>\n      <SearchBox   placeholder=\"search monster\" handleChange={e => setSearchField(e.target.value)}/>\n      <CardList Monsters={filterMonsters}/>\n    </div>\n  );\n}\n\n/*class App extends React.Component() {\n  constructor(){\n    super();\n    this.state ={\n      monsters:[]\n    };  \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then( (users) => this.setState({ monsters: users}));  \n  \n  }\n  render(){\n    return (\n      <div className=\"App\">\n       { this.state.monsters.map(monster =>(\n       <h1 key={monster.id}>{monster.name}</h1>\n       ))}\n      </div>\n    );\n  } \n}*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}